// Package Swagger provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Swagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi"
	"github.com/pkg/errors"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Error defines model for error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Item defines model for item.
type Item struct {
	Title *string `json:"title,omitempty"`
	Url   *string `json:"url,omitempty"`
}

// Category defines model for category.
type Category string

// Encoding defines model for encoding.
type Encoding string

// Order defines model for order.
type Order string

// Sort defines model for sort.
type Sort string

// ErrorGeneric defines model for ErrorGeneric.
type ErrorGeneric Error

// ListOk defines model for ListOk.
type ListOk struct {
	AdditionalProperties map[string]Item `json:"-"`
}

// GetParams defines parameters for Get.
type GetParams struct {

	// Specifies the film category
	Category *Category `json:"category,omitempty"`

	// Specifies the film encoding
	Encoding *Encoding `json:"encoding,omitempty"`

	// order
	Order *Order `json:"order,omitempty"`

	// Sort order:
	//  * `asc` - Ascending from A to Z
	//  * `desc` - Descending from Z to A
	Sort    *Sort `json:"sort,omitempty"`
	Filters *struct {
		LeechersMax *int `json:"leechers-max,omitempty"`
		LeechersMin *int `json:"leechers-min,omitempty"`
		PageMax     *int `json:"page-max,omitempty"`
		PageMin     *int `json:"page-min,omitempty"`
		SeedersMax  *int `json:"seeders-max,omitempty"`
		SeedersMin  *int `json:"seeders-min,omitempty"`
		Size        *int `json:"size,omitempty"`
	} `json:"filters,omitempty"`
}

// Getter for additional properties for ListOk. Returns the specified
// element and whether it was found
func (a ListOk) Get(fieldName string) (value Item, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ListOk
func (a *ListOk) Set(fieldName string, value Item) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Item)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ListOk to handle AdditionalProperties
func (a *ListOk) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Item)
		for fieldName, fieldBuf := range object {
			var fieldVal Item
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ListOk to handle AdditionalProperties
func (a ListOk) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, params *GetParams) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, params *GetParams) (*http.Response, error) {
	req, err := NewGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string, params *GetParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "category", *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Encoding != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "encoding", *params.Encoding); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sort", *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filters != nil {

		if queryParamBuf, err := json.Marshal(*params.Filters); err != nil {
			return nil, err
		} else {
			queryValues.Add("filters", string(queryParamBuf))
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		if !strings.HasSuffix(baseURL, "/") {
			baseURL += "/"
		}
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type getResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]Item `json:"-"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r getResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, params *GetParams) (*getResponse, error) {
	rsp, err := c.Get(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*getResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]Item `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

type ServerInterface interface {
	// lists films (GET /)
	Get(w http.ResponseWriter, r *http.Request)
}

// ParamsForGet operation parameters from context
func ParamsForGet(ctx context.Context) *GetParams {
	return ctx.Value("GetParams").(*GetParams)
}

// Get operation middleware
func GetCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// Parameter object where we will unmarshal all parameters from the context
		var params GetParams

		// ------------- Optional query parameter "category" -------------
		if paramValue := r.URL.Query().Get("category"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "category", r.URL.Query(), &params.Category)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter category: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "encoding" -------------
		if paramValue := r.URL.Query().Get("encoding"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "encoding", r.URL.Query(), &params.Encoding)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter encoding: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "order" -------------
		if paramValue := r.URL.Query().Get("order"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "sort" -------------
		if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "filters" -------------
		if paramValue := r.URL.Query().Get("filters"); paramValue != "" {

			var value struct {
				LeechersMax *int `json:"leechers-max,omitempty"`
				LeechersMin *int `json:"leechers-min,omitempty"`
				PageMax     *int `json:"page-max,omitempty"`
				PageMin     *int `json:"page-min,omitempty"`
				SeedersMax  *int `json:"seeders-max,omitempty"`
				SeedersMin  *int `json:"seeders-min,omitempty"`
				Size        *int `json:"size,omitempty"`
			}
			err = json.Unmarshal([]byte(paramValue), &value)
			if err != nil {
				http.Error(w, "Error unmarshaling parameter 'filters' as JSON", http.StatusBadRequest)
				return
			}

			params.Filters = &value

		}

		ctx = context.WithValue(ctx, "GetParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetCtx)
		r.Get("/", si.Get)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RWW2/bPAz9KwK/72lQ4jTr+uCnBdjQFdiwAn3rBagq07Za61JJ9tIW+e8D5Vxbp81e",
	"bEs84iEp8iQvIK121qCJAfIXcMILjRF9WkkRsbL+ib4LDNIrF5U1kMOFQ6lKhYHFGlmpGs3WYA6KII8t",
	"poURGiGHLbPHx1Z5LCAvRROQQ5A1atGzlKJtIuQgmgY4oGk15FfLVeyAQ2Flq9FE4RUG4CCM0ggc5vM5",
	"cNC2o+0bDvHJEW+IXpkKFgtyJm1Bi0PSWYOH09kyv5POKvx6enI8mk9PjoFDXQCHNj1r7CRtf6HAHRlD",
	"J4tRJ8lYqG4+mncqfXfFcErWF+jf5tNvD0e+sh0QtgiSyDHIYfZgfRwopvWRJZb82rBP7FYEectGbBYk",
	"GqoZK73VbMaiZZc9ghwQ5BvuYi4JM7s2e1JJ/AdlEvseCeo5vRALanEODaKs6XMgvwV5Ds6agGkavntv",
	"/Ska9Eqm6bAmokkFEM41SgoqQHYfqAovW0H877GEHP7LNrOW9daQITntyXarODMs2ZiVsvUeizEsOPxU",
	"If5++Cd2URSKTKI599ahj6pP572oVERNdMuS2Lt7lHEoSqJjjQqR2ZLRqdA3Ru8n3UBKkKRlh13aAum9",
	"ZFAmYoWeODWGIKpt41bHvQqIQ4r0jfeoYjPkgUPrm4M805YypV2VWshUatRCNZBD2VivTBufv1a0M5Y2",
	"1Wu3OMKw2fkZK61PkkKdtwwM0poJp4BDhz70BybjI/JiHRoy5fB5PBlPgYMTsU6JZfSoMMVCCadLPysg",
	"h1OMCbjR76vhO95AsrUmL/iH2LXgHYDtJeYAYBpgwh3czbv3vBrfkRbz4W7aIJQZRjhR4f7zvXXf2aWQ",
	"7D++Buz1QIo0YNnXkW9FsFRNuu/FzSu9mk4m++Z8jcuWgpJ6d/nT+9GRHR1M095qLehfApAShNTsoQ84",
	"oO9WzZhGD+oYXcizrFM+9tZx+COqCn3d3tEcZa5ubJYGJDuC1zN10WN/tHdptmZttOyXlQ+pM28WfwMA",
	"AP//TQXh6NAIAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
